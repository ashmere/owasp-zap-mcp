name: Build Docker Image (Local Testing)

on:
  workflow_dispatch:
    inputs:
      test_build_only:
        description: 'Test build only (no push)'
        required: false
        default: true
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-local:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Extract version from pyproject.toml (with fallback)
        id: version
        run: |
          # Try to extract version, with fallback
          if command -v python3 >/dev/null 2>&1; then
            VERSION=$(python3 -c "
            try:
                import tomllib
                with open('owasp_zap_mcp/pyproject.toml', 'rb') as f:
                    data = tomllib.load(f)
                print(data['project']['version'])
            except ImportError:
                # Fallback for older Python or missing tomllib
                import re
                with open('owasp_zap_mcp/pyproject.toml', 'r') as f:
                    content = f.read()
                    match = re.search(r'version\s*=\s*[\"\'](.*?)[\"\']', content)
                    if match:
                        print(match.group(1))
                    else:
                        print('0.2.0')
            except Exception as e:
                print('0.2.0')  # Default fallback
            " 2>/dev/null || echo "0.2.0")
          else
            VERSION="0.2.0"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version extracted: $VERSION"

      - name: Verify build context
        run: |
          echo "Current directory: $(pwd)"
          echo "Contents of owasp_zap_mcp directory:"
          ls -la owasp_zap_mcp/
          echo "Checking for required files:"
          test -f owasp_zap_mcp/Dockerfile && echo "‚úÖ Dockerfile found" || echo "‚ùå Dockerfile missing"
          test -f owasp_zap_mcp/requirements.txt && echo "‚úÖ requirements.txt found" || echo "‚ùå requirements.txt missing"
          test -f owasp_zap_mcp/pyproject.toml && echo "‚úÖ pyproject.toml found" || echo "‚ùå pyproject.toml missing"

      - name: Build Docker image (local optimized)
        run: |
          echo "Building Docker image for local testing..."
          cd owasp_zap_mcp

          # Build with verbose output for debugging
          docker build \
            --progress=plain \
            --no-cache \
            -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }} \
            -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
            .

          echo "Build completed successfully!"

      - name: Test Docker image
        run: |
          echo "Testing the built Docker image..."

          # Test that the image was built
          docker images | grep ${{ env.IMAGE_NAME }} || exit 1

          # Test basic container functionality
          echo "Testing container startup..."
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest python -c "import owasp_zap_mcp; print('‚úÖ Package imports successfully')" || exit 1

          echo "‚úÖ Docker image test passed!"

      - name: Output image details
        run: |
          echo "üéâ Image built successfully with tags:"
          echo "  ‚Ä¢ ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}"
          echo "  ‚Ä¢ ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          echo "Version: ${{ steps.version.outputs.version }}"
          echo ""
          echo "Image size:"
          docker images ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest --format "table {{.Repository}}:{{.Tag}}\t{{.Size}}"
          echo ""
          echo "To test the image locally:"
          echo "  docker run --rm -p 3000:3000 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest python -m owasp_zap_mcp.main --sse"
