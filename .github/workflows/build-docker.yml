name: Build and Push Docker Image

on:
  workflow_dispatch:
    inputs:
      push_to_registry:
        description: 'Push to registry'
        required: true
        default: true
        type: boolean
      local_testing:
        description: 'Local testing mode (skips registry operations)'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Extract version from pyproject.toml
        id: version
        run: |
          VERSION=$(python -c "
          import tomllib
          with open('owasp_zap_mcp/pyproject.toml', 'rb') as f:
              data = tomllib.load(f)
          print(data['project']['version'])
          ")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version extracted: $VERSION"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: ${{ inputs.push_to_registry && !inputs.local_testing }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        if: ${{ !inputs.local_testing || inputs.push_to_registry }}
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ steps.version.outputs.version }}
            type=raw,value=latest

      - name: Build and push Docker image
        if: ${{ success() }}
        uses: docker/build-push-action@v5
        with:
          context: ./owasp_zap_mcp
          file: ./owasp_zap_mcp/Dockerfile
          platforms: ${{ inputs.local_testing && 'linux/amd64' || 'linux/amd64,linux/arm64' }}
          push: ${{ inputs.push_to_registry && !inputs.local_testing }}
          tags: ${{ steps.meta.outputs.tags || format('{0}/{1}:{2}', env.REGISTRY, env.IMAGE_NAME, steps.version.outputs.version) }}
          labels: ${{ steps.meta.outputs.labels || '' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: ${{ inputs.local_testing }}

      - name: Output image details
        run: |
          echo "Image built with tags:"
          echo "${{ steps.meta.outputs.tags }}"
          echo "Version: ${{ steps.version.outputs.version }}"
